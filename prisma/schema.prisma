generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit {
  id                                  BigInt    @id @default(autoincrement())
  user_id                             BigInt
  from_player_id                      BigInt?
  to_player_id                        BigInt?
  created_at                          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime? @default(now()) @db.Timestamptz(6)
  raid_id                             BigInt?
  message                             String?   @db.VarChar(255)
  type                                BigInt?
  item_id                             BigInt?
  player_audit_from_player_idToplayer player?   @relation("audit_from_player_idToplayer", fields: [from_player_id], references: [id], onDelete: Cascade, map: "audit_from_player_id_foreign")
  item                                item?     @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "audit_item_id_foreign")
  raid                                raid?     @relation(fields: [raid_id], references: [id], onDelete: Cascade, map: "audit_raid_id_foreign")
  player_audit_to_player_idToplayer   player?   @relation("audit_to_player_idToplayer", fields: [to_player_id], references: [id], onDelete: Cascade, map: "audit_to_player_id_foreign")
  user                                user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "audit_user_id_foreign")
}

model guild {
  id                BigInt    @id @default(autoincrement())
  name              String    @unique(map: "guild_name_unique") @db.VarChar(255)
  last_win_modifier Float?    @default(1.0) @db.Real
  box_modifier      Float?    @default(1.0) @db.Real
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  raid_days         Json?     @default("[]")
  player            player[]
}

model item {
  id           BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(255)
  category     String?        @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  lucy_url     String         @db.VarChar(255)
  lucy_id      String         @db.VarChar(255)
  audit        audit[]
  loot_history loot_history[]
}

model knex_migrations {
  id             BigInt    @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          BigInt?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     BigInt  @id @default(autoincrement())
  is_locked BigInt?
}

model loot_history {
  id           BigInt    @id @default(autoincrement())
  item_id      BigInt
  looted_by_id BigInt
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  raid_id      BigInt?
  quantity     BigInt    @default(1)
  looted_from  String?   @db.VarChar(255)
  was_assigned Boolean?
  item         item      @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "loot_history_item_id_foreign")
  player       player    @relation(fields: [looted_by_id], references: [id], onDelete: Cascade, map: "loot_history_looted_by_id_foreign")
  raid         raid?     @relation(fields: [raid_id], references: [id], onUpdate: NoAction, map: "loot_history_raid_id_foreign")

  @@unique([looted_by_id, created_at, item_id, raid_id], map: "loot_composite_idx")
}

model password {
  hash       String    @db.VarChar(255)
  user_id    BigInt    @unique(map: "password_user_id_unique")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "password_user_id_foreign")
}

model player {
  id                                            BigInt         @id @default(autoincrement())
  name                                          String         @unique(map: "player_name_unique") @db.VarChar(255)
  level                                         BigInt?        @default(0)
  class                                         String?        @db.VarChar(255)
  attendance_30                                 Float?         @db.Real
  attendance_60                                 Float?         @db.Real
  attendance_90                                 Float?         @db.Real
  attendance_life                               Float?         @db.Real
  ticks_since_last_win                          BigInt?        @default(0)
  created_at                                    DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime?      @default(now()) @db.Timestamptz(6)
  total_tickets                                 BigInt?
  rank                                          String?        @default("alt") @db.VarChar(255)
  guild_id                                      BigInt?        @default(758349347704963075)
  total_boxes                                   BigInt?        @default(0)
  approved_at                                   DateTime?      @db.Timestamptz(6)
  deleted_at                                    DateTime?      @db.Timestamptz(6)
  base_tickets                                  BigInt?
  guild                                         guild?         @relation(fields: [guild_id], references: [id], map: "player_guild_id_foreign")
  audit_audit_from_player_idToplayer            audit[]        @relation("audit_from_player_idToplayer")
  audit_audit_to_player_idToplayer              audit[]        @relation("audit_to_player_idToplayer")
  loot_history                                  loot_history[]
  player_alt_playerToplayer_alt_alt_id          player_alt[]   @relation("playerToplayer_alt_alt_id")
  player_alt_playerToplayer_alt_player_id       player_alt[]   @relation("playerToplayer_alt_player_id")
  player_raid                                   player_raid[]
  raffle                                        raffle[]
  request_tick_playerTorequest_tick_approved_by request_tick[] @relation("playerTorequest_tick_approved_by")
  request_tick_playerTorequest_tick_player_id   request_tick[] @relation("playerTorequest_tick_player_id")
  request_tick_playerTorequest_tick_rejected_by request_tick[] @relation("playerTorequest_tick_rejected_by")
  user                                          user[]
}

model player_alt {
  player_id                           BigInt
  alt_id                              BigInt
  player_playerToplayer_alt_alt_id    player @relation("playerToplayer_alt_alt_id", fields: [alt_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_alt_alt_id_foreign")
  player_playerToplayer_alt_player_id player @relation("playerToplayer_alt_player_id", fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "player_alt_player_id_foreign")

  @@id([player_id, alt_id])
}

model player_raid {
  player_id  BigInt
  raid_id    BigInt
  raid_hour  BigInt
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  player     player    @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_raid_player_id_foreign")
  raid       raid      @relation(fields: [raid_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_raid_raid_id_foreign")

  @@id([player_id, raid_id, raid_hour])
  @@index([player_id], map: "player_id")
}

model raffle {
  id           BigInt    @id @default(autoincrement())
  raid_id      BigInt
  winner_id    BigInt?
  roll_symbol  String?   @db.VarChar(255)
  item_name    String    @db.VarChar(255)
  winning_roll BigInt?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  raid         raid      @relation(fields: [raid_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_raid_id_foreign")
  player       player?   @relation(fields: [winner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_winner_id_foreign")
}

model raid {
  id           BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  split        String         @default("1") @db.VarChar(255)
  is_official  Boolean?       @default(true)
  audit        audit[]
  loot_history loot_history[]
  player_raid  player_raid[]
  raffle       raffle[]
  request_tick request_tick[]

  @@unique([created_at, split], map: "raid_created_at_split_unique")
}

model request_tick {
  player_id                               BigInt
  raid_id                                 BigInt
  raid_hour                               BigInt
  approved_by                             BigInt?
  approved_at                             DateTime? @db.Timestamptz(6)
  created_at                              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime? @default(now()) @db.Timestamptz(6)
  rejected_by                             BigInt?
  rejected_at                             DateTime? @db.Timestamptz(6)
  player_playerTorequest_tick_approved_by player?   @relation("playerTorequest_tick_approved_by", fields: [approved_by], references: [id], onDelete: Cascade, map: "request_tick_approved_by_foreign")
  player_playerTorequest_tick_player_id   player    @relation("playerTorequest_tick_player_id", fields: [player_id], references: [id], onDelete: Cascade, map: "request_tick_player_id_foreign")
  raid                                    raid      @relation(fields: [raid_id], references: [id], onDelete: Cascade, map: "request_tick_raid_id_foreign")
  player_playerTorequest_tick_rejected_by player?   @relation("playerTorequest_tick_rejected_by", fields: [rejected_by], references: [id], onDelete: Cascade, map: "request_tick_rejected_by_foreign")

  @@id([player_id, raid_id, raid_hour])
}

model user {
  id         BigInt    @id @default(autoincrement())
  player_id  BigInt
  email      String?   @unique(map: "user_email_unique") @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  role       String?   @default("member") @db.VarChar(255)
  approved   Boolean?  @default(false)
  bot_token  String?   @db.VarChar(255)
  player     player    @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "user_player_id_foreign")
  audit      audit[]
  password   password?
}
